#!/bin/bash

DAYS=182
DEPTH=1
STICKY=
MAGIC='x'
BYMONTH=
BYDAY=
FLAT='/'
WRAP=
SIMPLE=

MP="[0-9][0-9]"
YP="[0-9][0-9][0-9][0-9]"

read -r -d '' USAGE <<'EOF'
Archive files in TARGET directory older than a given age. Archived items are
placed in a subdirectory of TARGET. The subdirectory archive is structured
according the options given. By default the subdirectory name will be the year
of the file's modification time.

archivedir [-t DAYS] [-z DEPTH] [-x] [-m] [-d] [-f] [-w] [-s] TARGET
  -t DAYS
    Archive limit in days. Files not modified within this period will be
    archived. 
    Default: 182
  -z DEPTH
    Maximum deth to descend to when considering files to archive.
    Default: 1
  -x
    Enable sticky files. Files with the sticky extension will never be
    archived. By default this is `x`.
    For example, `foo.x`, `bar.x.note`, and `baz.test.x.md` will all be
    considered sticky.
  -X EXTENSION
    Specify the extension used to mark files as sticky.
    Default: "x"
  -m
    Include month in dated archive name.
  -d
    Include day in dated archive name. Implies `-m`
  -f
    Flat mode. Rather than nesting dated archive structures, encode all date
    information in a single directory.
    For example, `TARGET/2022/10/19` becomes`TARGET/2022-10-19`
  -w
    Wrap mode. Places dated archive directory structures beneath a single
    archive root named "archive".
    For example, `TARGET/2022/10/19` becomes`TARGET/archive/2022/10/19`
  -s
    Simple mode. Archive files under `TARGET/archive` with no dated directory
    structure. Invalidates date-related options.
  -h
    Display this help message and exit.
EOF

err() {
  local msg="${1}"
  usage "ERR ${msg}"
  exit 1
}

mvsafe() {
  local a="${1}"
  local b="${2}"
  if [[ -f "${b}" ]]; then
    bd="$(dirname "${b}")"
    bb="$(basename "${b}")"
    while [[ -f "${b}" ]]; do
      bb="_${bb}"
      b="${bd}/${bb}"
    done
  fi
  mv "${a}" "${b}"
}

test_sticky() {
  local base="${1}"
  [[ "${base}" =~ ^[A-Z] ]] || return 1
  local norm="$(sed -e "s/\..*$//" -e "s/[[:punct:]0-9]\+//g" <<< "${base}")"
  [[ "${norm}" =~ ^[A-Z]+$ ]]
}

while getopts 't:z:xX:mdfwsh?' arg; do
  case "${arg}" in
    t) DAYS="${OPTARG}" ;;
    z) DEPTH="${OPTARG}" ;;
    x) STICKY="true" ;;
    X) MAGIC="${OPTARG}" ;;
    m) BYMONTH="true" ;;
    d) BYDAY="true" ;;
    f) FLAT="-" ;;
    w) WRAP="true" ;;
    s) SIMPLE="true" ;;
    h|?) echo "${USAGE}"; exit 0 ;;
    *) err "Invalid argument '${arg}'"; exit 1 ;;
  esac
done
shift $((OPTIND - 1))

TARGET="${1}"
[[ -z "${TARGET}" ]] && err 'no target given'
! [[ -d "${TARGET}" ]] && err 'target is not a directory'
[[ -n "${BYDAY}" ]] && BYMONTH="true"

find "${TARGET}"                           \
  -maxdepth "${DEPTH}"                     \
  -type d                                  \
  "("                                      \
    -path "${TARGET}/archive"              \
    -o -path "${TARGET}/${YP}"             \
    -o -path "${TARGET}/${YP}-${MP}"       \
    -o -path "${TARGET}/${YP}-${MP}-${MP}" \
  ")"                                      \
  -prune                                   \
  -o                                       \
  -type f                                  \
  -mtime "+${DAYS}"                        \
  -printf "%P\0"                           \
| while read -d $'\0' np; do
  bn="$(basename "${np}")"
  if [[ -n "${STICKY}" ]] && [[ "${bn}" =~ .\.${MAGIC}($|\.) ]]; then
    echo "ignored: ${np}"
    continue
  fi
  fp="${TARGET}/${np}"
  mtime="$(stat -c %y "${fp}" | grep -Eo '^\S+')"
  year="$(echo "${mtime}" | cut -d - -f 1)"
  month="$(echo "${mtime}" | cut -d - -f 2)"
  day="$(echo "${mtime}" | cut -d - -f 3)"
  if [[ -n "${SIMPLE}" ]]; then
    dir="${TARGET}/archive"
  else
    if [[ -n "${WRAP}" ]]; then
      dir="${TARGET}/archive/${year}"
    else
      dir="${TARGET}/${year}"
    fi
    [[ -n "${BYMONTH}" ]] && dir="${dir}${FLAT}${month}"
    [[ -n "${BYDAY}" ]] && dir="${dir}${FLAT}${day}"
  fi
  out="${dir}/${np}"
  outd="$(dirname "${out}")"
  mkdir -p "${outd}"
  mvsafe "${fp}" "${out}"
  dd="$(dirname "${TARGET}")"
  rd="$(realpath --relative-to="${dd}" "${outd}")"
  echo "archived: ${np} to ${rd}"
done
